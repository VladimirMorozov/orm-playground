plugins {
    id 'nu.studer.jooq' version '8.2.1'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

group = 'me.vmorozov'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform {
    }
}

sourceSets {
    jooq {
        java { }
    }
    main {
        compileClasspath += sourceSets.jooq.output
        runtimeClasspath += sourceSets.jooq.output
    }
    test {
        compileClasspath += sourceSets.jooq.output
        runtimeClasspath += sourceSets.jooq.output
    }
}


configurations {
    jooqImplementation.extendsFrom(implementation)
    jooqRuntimeOnly.extendsFrom(runtimeOnly)
}

ext['jooq.version'] = jooqVersion
jooq {
    version = jooqVersion // seems to be ignored because of io.spring.dependency-management
    configurations {
        ormPlayground {
            generateSchemaSourceOnCompilation = false

            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/postgres'
                    user = 'postgres'
                    password = 'secret'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy {
                        name = 'me.vmorozov.orm.playground.jooq.generator.CustomGeneratorStrategy'
                    }
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    generate {
                        relations = true
                        deprecated = false
                        records = true
                        pojos = true
                        fluentSetters = true
                        javaTimeTypes = true
                        validationAnnotations = true
                        // ...
                    }
                    target {
                        packageName = 'me.vmorozov.orm.playground.jooq.generated'
                        directory = 'src/jooq/java/'
                    }
                }
            }
        }
    }
}

dependencies {

    // while I don't need this starter directly, 
    // serialization for web is an important part of mapping,
    // I need auto-configured objectMapper from it
    implementation("org.springframework.boot:spring-boot-starter-web")

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate6', version: '2.15.1'
    
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
    implementation("org.mybatis:mybatis-typehandlers-jsr310:1.0.2")

    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation group: 'org.simpleflatmapper', name: 'sfm-jooq', version: '8.2.3'
    jooqGenerator 'org.postgresql:postgresql'
    jooqGenerator project(':orm.playground.jooq.generator')

    runtimeOnly 'org.postgresql:postgresql'
    implementation('org.hibernate.validator:hibernate-validator')
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation('org.assertj:assertj-core:3.11.0')

    implementation 'org.simpleflatmapper:sfm-springjdbc:8.2.3'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    //implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    
    

    
}
