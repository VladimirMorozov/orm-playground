/*
 * This file is generated by jOOQ.
 */
package me.vmorozov.orm.playground.jooq.generated.tables;

import me.vmorozov.orm.playground.jooq.generated.Indexes;
import me.vmorozov.orm.playground.jooq.generated.Keys;
import me.vmorozov.orm.playground.jooq.generated.Public;
import me.vmorozov.orm.playground.jooq.generated.tables.records.EmployeeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeTable extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = -1485647455;

    /**
     * The reference instance of <code>public.employee</code>
     */
    public static final EmployeeTable EMPLOYEE = new EmployeeTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * The column <code>public.employee.id</code>.
     */
    public final TableField<EmployeeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('employee_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.employee.department_id</code>.
     */
    public final TableField<EmployeeRecord, Integer> DEPARTMENT_ID = createField("department_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employee.name</code>.
     */
    public final TableField<EmployeeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.employee.position</code>.
     */
    public final TableField<EmployeeRecord, String> POSITION = createField("position", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.employee.work_start</code>.
     */
    public final TableField<EmployeeRecord, OffsetDateTime> WORK_START = createField("work_start", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.employee</code> table reference
     */
    public EmployeeTable() {
        this(DSL.name("employee"), null);
    }

    /**
     * Create an aliased <code>public.employee</code> table reference
     */
    public EmployeeTable(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>public.employee</code> table reference
     */
    public EmployeeTable(Name alias) {
        this(alias, EMPLOYEE);
    }

    private EmployeeTable(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeTable(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EmployeeTable(Table<O> child, ForeignKey<O, EmployeeRecord> key) {
        super(child, key, EMPLOYEE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EmployeeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMPLOYEE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeeRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeeRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeRecord>>asList(Keys.EMPLOYEE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EmployeeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeeRecord, ?>>asList(Keys.EMPLOYEE__EMPLOYEE_DEPARTMENT_ID_FK);
    }

    public DepartmentTable department() {
        return new DepartmentTable(this, Keys.EMPLOYEE__EMPLOYEE_DEPARTMENT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeTable as(String alias) {
        return new EmployeeTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeTable as(Name alias) {
        return new EmployeeTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeTable rename(String name) {
        return new EmployeeTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeTable rename(Name name) {
        return new EmployeeTable(name, null);
    }
}
