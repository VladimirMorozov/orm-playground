<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.vmorozov.orm.playground.mybatis.dao.DepartmentMapper">

    <resultMap id="department-info" type="me.vmorozov.orm.playground.domain.DepartmentInfo" autoMapping="true">
        <id property="id" column="id"/>
        <association property="company" javaType="me.vmorozov.orm.playground.domain.Company"
                     notNullColumn="id" columnPrefix="company_" autoMapping="true">
            <id property="id" column="id"/>
        </association>
        <collection property="employees" ofType="me.vmorozov.orm.playground.domain.Employee"
                    notNullColumn="id" columnPrefix="employee_" autoMapping="true">
            <id property="id" column="id"/>
        </collection>
    </resultMap>

    <select id="getDepartmentInfo" resultMap="department-info">
        SELECT department.*,
            c.name          as company_name,
            e.id            as employee_id,
            e.department_id as employee_department_id,
            e.name          as employee_name,
            e.position      as employee_position,
            e.work_start    as employee_work_start
        FROM department
                 JOIN company c on department.company_id = c.id
                 JOIN employee e on department.id = e.department_id
        WHERE department.id = #{id}
    </select>

    <select id="getDepartmentTableList"
            resultType="me.vmorozov.orm.playground.domain.search.DepartmentTableRow"
            parameterType="me.vmorozov.orm.playground.domain.search.DepartmentSearch">
        SELECT
            d.id            as id,
            d.name          as department_name,
            head.name       as department_head_name,
            c.name          as company_name,
            count(e.id)     as employee_count
        <include refid="getDepartmentTableCommon"/>
        <if test="p">
            <if test="p.sort.sorted">
                ORDER BY
                <foreach collection="p.sort" item="order" separator=",">
                    #{order.property} ${order.direction}
                </foreach>
            </if>
            LIMIT #{p.pageSize}
            OFFSET #{p.offset}
        </if>
    </select>

    <select id="getDepartmentTableCount" resultType="long">
        SELECT COUNT(*) FROM (SELECT d.id <include refid="getDepartmentTableCommon"/> AS sub
    </select>

    <sql id="getDepartmentTableCommon">
        FROM department d
        JOIN company c on d.company_id = c.id
        LEFT JOIN employee e on d.id = e.department_id
        LEFT JOIN employee head on d.head_id = head.id
        <where>
            <if test="s.departmentName">
                AND lower(d.name) like '%' || lower(#{s.departmentName}) || '%'
            </if>
            <if test="s.departmentHeadName">
                AND lower(head.name) like '%' || lower(#{s.departmentHeadName}) || '%'
            </if>
            <if test="s.companyName">
                AND lower(c.name) like '%' || lower(#{s.companyName}) || '%'
            </if>
            <if test="s.mustHaveProgrammers">
                AND EXISTS (
                     SELECT id
                     FROM employee
                     WHERE employee.id = d.id
                     AND employee.position = 'programmer')
            </if>
        </where>
        GROUP BY c.id, d.id, head.name
        <if test="s.employeeCount and (s.employeeCount.min or s.employeeCount.max)">
            <trim prefix="HAVING" prefixOverrides="AND |OR ">
                <if test="s.employeeCount.min">
                    AND count(e.id) >= #{s.employeeCount.min}
                </if>
                <if test="s.employeeCount.max">
                    <![CDATA[
                    AND count(e.id) <= #{s.employeeCount.max}
                    ]]>
                </if>
            </trim>
        </if>
    </sql>

</mapper>