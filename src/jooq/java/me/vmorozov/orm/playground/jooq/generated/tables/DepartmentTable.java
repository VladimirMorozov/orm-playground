/*
 * This file is generated by jOOQ.
 */
package me.vmorozov.orm.playground.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import me.vmorozov.orm.playground.jooq.generated.Keys;
import me.vmorozov.orm.playground.jooq.generated.Public;
import me.vmorozov.orm.playground.jooq.generated.tables.records.DepartmentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepartmentTable extends TableImpl<DepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.department</code>
     */
    public static final DepartmentTable DEPARTMENT = new DepartmentTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentRecord> getRecordType() {
        return DepartmentRecord.class;
    }

    /**
     * The column <code>public.department.id</code>.
     */
    public final TableField<DepartmentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.department.head_id</code>.
     */
    public final TableField<DepartmentRecord, Integer> HEAD_ID = createField(DSL.name("head_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.department.company_id</code>.
     */
    public final TableField<DepartmentRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.department.name</code>.
     */
    public final TableField<DepartmentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    private DepartmentTable(Name alias, Table<DepartmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private DepartmentTable(Name alias, Table<DepartmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.department</code> table reference
     */
    public DepartmentTable(String alias) {
        this(DSL.name(alias), DEPARTMENT);
    }

    /**
     * Create an aliased <code>public.department</code> table reference
     */
    public DepartmentTable(Name alias) {
        this(alias, DEPARTMENT);
    }

    /**
     * Create a <code>public.department</code> table reference
     */
    public DepartmentTable() {
        this(DSL.name("department"), null);
    }

    public <O extends Record> DepartmentTable(Table<O> child, ForeignKey<O, DepartmentRecord> key) {
        super(child, key, DEPARTMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DepartmentRecord, Integer> getIdentity() {
        return (Identity<DepartmentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DepartmentRecord> getPrimaryKey() {
        return Keys.DEPARTMENT_PKEY;
    }

    @Override
    public List<ForeignKey<DepartmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEPARTMENT__DEPARTMENT_HEAD_ID_FKEY, Keys.DEPARTMENT__DEPARTMENT_COMPANY_ID_FKEY);
    }

    private transient EmployeeTable _employee;
    private transient CompanyTable _company;

    /**
     * Get the implicit join path to the <code>public.employee</code> table.
     */
    public EmployeeTable employee() {
        if (_employee == null)
            _employee = new EmployeeTable(this, Keys.DEPARTMENT__DEPARTMENT_HEAD_ID_FKEY);

        return _employee;
    }

    /**
     * Get the implicit join path to the <code>public.company</code> table.
     */
    public CompanyTable company() {
        if (_company == null)
            _company = new CompanyTable(this, Keys.DEPARTMENT__DEPARTMENT_COMPANY_ID_FKEY);

        return _company;
    }

    @Override
    public DepartmentTable as(String alias) {
        return new DepartmentTable(DSL.name(alias), this);
    }

    @Override
    public DepartmentTable as(Name alias) {
        return new DepartmentTable(alias, this);
    }

    @Override
    public DepartmentTable as(Table<?> alias) {
        return new DepartmentTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DepartmentTable rename(String name) {
        return new DepartmentTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DepartmentTable rename(Name name) {
        return new DepartmentTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DepartmentTable rename(Table<?> name) {
        return new DepartmentTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
