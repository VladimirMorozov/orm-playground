/*
 * This file is generated by jOOQ.
 */
package me.vmorozov.orm.playground.jooq.generated.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import me.vmorozov.orm.playground.jooq.generated.Keys;
import me.vmorozov.orm.playground.jooq.generated.Public;
import me.vmorozov.orm.playground.jooq.generated.tables.records.EmployeeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeTable extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employee</code>
     */
    public static final EmployeeTable EMPLOYEE = new EmployeeTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * The column <code>public.employee.id</code>.
     */
    public final TableField<EmployeeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.employee.department_id</code>.
     */
    public final TableField<EmployeeRecord, Integer> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employee.name</code>.
     */
    public final TableField<EmployeeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.employee.position</code>.
     */
    public final TableField<EmployeeRecord, String> POSITION = createField(DSL.name("position"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.employee.work_start</code>.
     */
    public final TableField<EmployeeRecord, OffsetDateTime> WORK_START = createField(DSL.name("work_start"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private EmployeeTable(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeTable(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employee</code> table reference
     */
    public EmployeeTable(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>public.employee</code> table reference
     */
    public EmployeeTable(Name alias) {
        this(alias, EMPLOYEE);
    }

    /**
     * Create a <code>public.employee</code> table reference
     */
    public EmployeeTable() {
        this(DSL.name("employee"), null);
    }

    public <O extends Record> EmployeeTable(Table<O> child, ForeignKey<O, EmployeeRecord> key) {
        super(child, key, EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EmployeeRecord, Integer> getIdentity() {
        return (Identity<EmployeeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_PKEY;
    }

    @Override
    public List<ForeignKey<EmployeeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMPLOYEE__EMPLOYEE_DEPARTMENT_ID_FK);
    }

    private transient DepartmentTable _department;

    /**
     * Get the implicit join path to the <code>public.department</code> table.
     */
    public DepartmentTable department() {
        if (_department == null)
            _department = new DepartmentTable(this, Keys.EMPLOYEE__EMPLOYEE_DEPARTMENT_ID_FK);

        return _department;
    }

    @Override
    public EmployeeTable as(String alias) {
        return new EmployeeTable(DSL.name(alias), this);
    }

    @Override
    public EmployeeTable as(Name alias) {
        return new EmployeeTable(alias, this);
    }

    @Override
    public EmployeeTable as(Table<?> alias) {
        return new EmployeeTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeTable rename(String name) {
        return new EmployeeTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeTable rename(Name name) {
        return new EmployeeTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeTable rename(Table<?> name) {
        return new EmployeeTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super String, ? super String, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
